package hu.advancedweb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import hu.advancedweb.model.ExamAnswer;
import hu.advancedweb.model.ExamAnswerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the ExamAnswer service. Represents a row in the &quot;lms_ExamAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link hu.advancedweb.model.ExamAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExamAnswerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExamAnswerImpl
 * @see hu.advancedweb.model.ExamAnswer
 * @see hu.advancedweb.model.ExamAnswerModel
 * @generated
 */
public class ExamAnswerModelImpl extends BaseModelImpl<ExamAnswer>
    implements ExamAnswerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a exam answer model instance should use the {@link hu.advancedweb.model.ExamAnswer} interface instead.
     */
    public static final String TABLE_NAME = "lms_ExamAnswer";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "answers", Types.VARCHAR },
            { "date_", Types.TIMESTAMP },
            { "examConfigId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table lms_ExamAnswer (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,answers TEXT null,date_ DATE null,examConfigId LONG)";
    public static final String TABLE_SQL_DROP = "drop table lms_ExamAnswer";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.hu.advancedweb.model.ExamAnswer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.hu.advancedweb.model.ExamAnswer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.hu.advancedweb.model.ExamAnswer"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long EXAMCONFIGID_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long USERID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.hu.advancedweb.model.ExamAnswer"));
    private static ClassLoader _classLoader = ExamAnswer.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ExamAnswer.class
        };
    private long _id;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private Long _userId;
    private Long _originalUserId;
    private boolean _setOriginalUserId;
    private String _answers;
    private Date _date;
    private Long _examConfigId;
    private Long _originalExamConfigId;
    private boolean _setOriginalExamConfigId;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private ExamAnswer _escapedModelProxy;

    public ExamAnswerModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ExamAnswer.class;
    }

    public String getModelClassName() {
        return ExamAnswer.class.getName();
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    public Long getUserId() {
        return _userId;
    }

    public void setUserId(Long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public Long getOriginalUserId() {
        return _originalUserId;
    }

    public String getAnswers() {
        if (_answers == null) {
            return StringPool.BLANK;
        } else {
            return _answers;
        }
    }

    public void setAnswers(String answers) {
        _answers = answers;
    }

    public Date getDate() {
        return _date;
    }

    public void setDate(Date date) {
        _date = date;
    }

    public Long getExamConfigId() {
        return _examConfigId;
    }

    public void setExamConfigId(Long examConfigId) {
        _columnBitmask |= EXAMCONFIGID_COLUMN_BITMASK;

        if (!_setOriginalExamConfigId) {
            _setOriginalExamConfigId = true;

            _originalExamConfigId = _examConfigId;
        }

        _examConfigId = examConfigId;
    }

    public Long getOriginalExamConfigId() {
        return _originalExamConfigId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExamAnswer toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ExamAnswer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
                    ExamAnswer.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ExamAnswerImpl examAnswerImpl = new ExamAnswerImpl();

        examAnswerImpl.setId(getId());
        examAnswerImpl.setGroupId(getGroupId());
        examAnswerImpl.setCompanyId(getCompanyId());
        examAnswerImpl.setUserId(getUserId());
        examAnswerImpl.setAnswers(getAnswers());
        examAnswerImpl.setDate(getDate());
        examAnswerImpl.setExamConfigId(getExamConfigId());

        examAnswerImpl.resetOriginalValues();

        return examAnswerImpl;
    }

    public int compareTo(ExamAnswer examAnswer) {
        long primaryKey = examAnswer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ExamAnswer examAnswer = null;

        try {
            examAnswer = (ExamAnswer) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = examAnswer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ExamAnswerModelImpl examAnswerModelImpl = this;

        examAnswerModelImpl._originalGroupId = examAnswerModelImpl._groupId;

        examAnswerModelImpl._setOriginalGroupId = false;

        examAnswerModelImpl._originalCompanyId = examAnswerModelImpl._companyId;

        examAnswerModelImpl._setOriginalCompanyId = false;

        examAnswerModelImpl._originalUserId = examAnswerModelImpl._userId;

        examAnswerModelImpl._setOriginalUserId = false;

        examAnswerModelImpl._originalExamConfigId = examAnswerModelImpl._examConfigId;

        examAnswerModelImpl._setOriginalExamConfigId = false;

        examAnswerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ExamAnswer> toCacheModel() {
        ExamAnswerCacheModel examAnswerCacheModel = new ExamAnswerCacheModel();

        examAnswerCacheModel.id = getId();

        examAnswerCacheModel.groupId = getGroupId();

        examAnswerCacheModel.companyId = getCompanyId();

        examAnswerCacheModel.userId = getUserId();

        examAnswerCacheModel.answers = getAnswers();

        String answers = examAnswerCacheModel.answers;

        if ((answers != null) && (answers.length() == 0)) {
            examAnswerCacheModel.answers = null;
        }

        Date date = getDate();

        if (date != null) {
            examAnswerCacheModel.date = date.getTime();
        } else {
            examAnswerCacheModel.date = Long.MIN_VALUE;
        }

        examAnswerCacheModel.examConfigId = getExamConfigId();

        return examAnswerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", answers=");
        sb.append(getAnswers());
        sb.append(", date=");
        sb.append(getDate());
        sb.append(", examConfigId=");
        sb.append(getExamConfigId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("hu.advancedweb.model.ExamAnswer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>answers</column-name><column-value><![CDATA[");
        sb.append(getAnswers());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>examConfigId</column-name><column-value><![CDATA[");
        sb.append(getExamConfigId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
