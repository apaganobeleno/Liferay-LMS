package hu.advancedweb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import hu.advancedweb.model.ExamConfig;
import hu.advancedweb.model.ExamConfigModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the ExamConfig service. Represents a row in the &quot;lms_ExamConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link hu.advancedweb.model.ExamConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExamConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExamConfigImpl
 * @see hu.advancedweb.model.ExamConfig
 * @see hu.advancedweb.model.ExamConfigModel
 * @generated
 */
public class ExamConfigModelImpl extends BaseModelImpl<ExamConfig>
    implements ExamConfigModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a exam config model instance should use the {@link hu.advancedweb.model.ExamConfig} interface instead.
     */
    public static final String TABLE_NAME = "lms_ExamConfig";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "questions", Types.VARCHAR },
            { "evaluator", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table lms_ExamConfig (id_ LONG not null primary key,groupId LONG,companyId LONG,questions TEXT null,evaluator TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table lms_ExamConfig";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.hu.advancedweb.model.ExamConfig"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.hu.advancedweb.model.ExamConfig"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.hu.advancedweb.model.ExamConfig"));
    private static ClassLoader _classLoader = ExamConfig.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            ExamConfig.class
        };
    private long _id;
    private long _groupId;
    private long _companyId;
    private String _questions;
    private String _evaluator;
    private transient ExpandoBridge _expandoBridge;
    private ExamConfig _escapedModelProxy;

    public ExamConfigModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return ExamConfig.class;
    }

    public String getModelClassName() {
        return ExamConfig.class.getName();
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    public String getQuestions() {
        if (_questions == null) {
            return StringPool.BLANK;
        } else {
            return _questions;
        }
    }

    public void setQuestions(String questions) {
        _questions = questions;
    }

    public String getEvaluator() {
        if (_evaluator == null) {
            return StringPool.BLANK;
        } else {
            return _evaluator;
        }
    }

    public void setEvaluator(String evaluator) {
        _evaluator = evaluator;
    }

    @Override
    public ExamConfig toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (ExamConfig) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
                    ExamConfig.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        ExamConfigImpl examConfigImpl = new ExamConfigImpl();

        examConfigImpl.setId(getId());
        examConfigImpl.setGroupId(getGroupId());
        examConfigImpl.setCompanyId(getCompanyId());
        examConfigImpl.setQuestions(getQuestions());
        examConfigImpl.setEvaluator(getEvaluator());

        examConfigImpl.resetOriginalValues();

        return examConfigImpl;
    }

    public int compareTo(ExamConfig examConfig) {
        long primaryKey = examConfig.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        ExamConfig examConfig = null;

        try {
            examConfig = (ExamConfig) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = examConfig.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ExamConfig> toCacheModel() {
        ExamConfigCacheModel examConfigCacheModel = new ExamConfigCacheModel();

        examConfigCacheModel.id = getId();

        examConfigCacheModel.groupId = getGroupId();

        examConfigCacheModel.companyId = getCompanyId();

        examConfigCacheModel.questions = getQuestions();

        String questions = examConfigCacheModel.questions;

        if ((questions != null) && (questions.length() == 0)) {
            examConfigCacheModel.questions = null;
        }

        examConfigCacheModel.evaluator = getEvaluator();

        String evaluator = examConfigCacheModel.evaluator;

        if ((evaluator != null) && (evaluator.length() == 0)) {
            examConfigCacheModel.evaluator = null;
        }

        return examConfigCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", questions=");
        sb.append(getQuestions());
        sb.append(", evaluator=");
        sb.append(getEvaluator());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("hu.advancedweb.model.ExamConfig");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>questions</column-name><column-value><![CDATA[");
        sb.append(getQuestions());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>evaluator</column-name><column-value><![CDATA[");
        sb.append(getEvaluator());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
