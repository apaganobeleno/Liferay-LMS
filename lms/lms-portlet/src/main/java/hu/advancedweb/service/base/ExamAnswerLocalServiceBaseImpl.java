package hu.advancedweb.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import hu.advancedweb.model.ExamAnswer;

import hu.advancedweb.service.ExamAnswerLocalService;
import hu.advancedweb.service.ExamConfigLocalService;
import hu.advancedweb.service.persistence.ExamAnswerPersistence;
import hu.advancedweb.service.persistence.ExamConfigPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the exam answer local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link hu.advancedweb.service.impl.ExamAnswerLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see hu.advancedweb.service.impl.ExamAnswerLocalServiceImpl
 * @see hu.advancedweb.service.ExamAnswerLocalServiceUtil
 * @generated
 */
public abstract class ExamAnswerLocalServiceBaseImpl
    implements ExamAnswerLocalService, IdentifiableBean {
    private static Log _log = LogFactoryUtil.getLog(ExamAnswerLocalServiceBaseImpl.class);
    @BeanReference(type = ExamAnswerLocalService.class)
    protected ExamAnswerLocalService examAnswerLocalService;
    @BeanReference(type = ExamAnswerPersistence.class)
    protected ExamAnswerPersistence examAnswerPersistence;
    @BeanReference(type = ExamConfigLocalService.class)
    protected ExamConfigLocalService examConfigLocalService;
    @BeanReference(type = ExamConfigPersistence.class)
    protected ExamConfigPersistence examConfigPersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link hu.advancedweb.service.ExamAnswerLocalServiceUtil} to access the exam answer local service.
     */

    /**
     * Adds the exam answer to the database. Also notifies the appropriate model listeners.
     *
     * @param examAnswer the exam answer
     * @return the exam answer that was added
     * @throws SystemException if a system exception occurred
     */
    public ExamAnswer addExamAnswer(ExamAnswer examAnswer)
        throws SystemException {
        examAnswer.setNew(true);

        examAnswer = examAnswerPersistence.update(examAnswer, false);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.reindex(examAnswer);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }

        return examAnswer;
    }

    /**
     * Creates a new exam answer with the primary key. Does not add the exam answer to the database.
     *
     * @param id the primary key for the new exam answer
     * @return the new exam answer
     */
    public ExamAnswer createExamAnswer(long id) {
        return examAnswerPersistence.create(id);
    }

    /**
     * Deletes the exam answer with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param id the primary key of the exam answer
     * @throws PortalException if a exam answer with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public void deleteExamAnswer(long id)
        throws PortalException, SystemException {
        ExamAnswer examAnswer = examAnswerPersistence.remove(id);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.delete(examAnswer);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
     * Deletes the exam answer from the database. Also notifies the appropriate model listeners.
     *
     * @param examAnswer the exam answer
     * @throws SystemException if a system exception occurred
     */
    public void deleteExamAnswer(ExamAnswer examAnswer)
        throws SystemException {
        examAnswerPersistence.remove(examAnswer);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.delete(examAnswer);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return examAnswerPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return examAnswerPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return examAnswerPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return examAnswerPersistence.countWithDynamicQuery(dynamicQuery);
    }

    public ExamAnswer fetchExamAnswer(long id) throws SystemException {
        return examAnswerPersistence.fetchByPrimaryKey(id);
    }

    /**
     * Returns the exam answer with the primary key.
     *
     * @param id the primary key of the exam answer
     * @return the exam answer
     * @throws PortalException if a exam answer with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public ExamAnswer getExamAnswer(long id)
        throws PortalException, SystemException {
        return examAnswerPersistence.findByPrimaryKey(id);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return examAnswerPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the exam answers.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of exam answers
     * @param end the upper bound of the range of exam answers (not inclusive)
     * @return the range of exam answers
     * @throws SystemException if a system exception occurred
     */
    public List<ExamAnswer> getExamAnswers(int start, int end)
        throws SystemException {
        return examAnswerPersistence.findAll(start, end);
    }

    /**
     * Returns the number of exam answers.
     *
     * @return the number of exam answers
     * @throws SystemException if a system exception occurred
     */
    public int getExamAnswersCount() throws SystemException {
        return examAnswerPersistence.countAll();
    }

    /**
     * Updates the exam answer in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param examAnswer the exam answer
     * @return the exam answer that was updated
     * @throws SystemException if a system exception occurred
     */
    public ExamAnswer updateExamAnswer(ExamAnswer examAnswer)
        throws SystemException {
        return updateExamAnswer(examAnswer, true);
    }

    /**
     * Updates the exam answer in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param examAnswer the exam answer
     * @param merge whether to merge the exam answer with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the exam answer that was updated
     * @throws SystemException if a system exception occurred
     */
    public ExamAnswer updateExamAnswer(ExamAnswer examAnswer, boolean merge)
        throws SystemException {
        examAnswer.setNew(false);

        examAnswer = examAnswerPersistence.update(examAnswer, merge);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.reindex(examAnswer);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }

        return examAnswer;
    }

    /**
     * Returns the exam answer local service.
     *
     * @return the exam answer local service
     */
    public ExamAnswerLocalService getExamAnswerLocalService() {
        return examAnswerLocalService;
    }

    /**
     * Sets the exam answer local service.
     *
     * @param examAnswerLocalService the exam answer local service
     */
    public void setExamAnswerLocalService(
        ExamAnswerLocalService examAnswerLocalService) {
        this.examAnswerLocalService = examAnswerLocalService;
    }

    /**
     * Returns the exam answer persistence.
     *
     * @return the exam answer persistence
     */
    public ExamAnswerPersistence getExamAnswerPersistence() {
        return examAnswerPersistence;
    }

    /**
     * Sets the exam answer persistence.
     *
     * @param examAnswerPersistence the exam answer persistence
     */
    public void setExamAnswerPersistence(
        ExamAnswerPersistence examAnswerPersistence) {
        this.examAnswerPersistence = examAnswerPersistence;
    }

    /**
     * Returns the exam config local service.
     *
     * @return the exam config local service
     */
    public ExamConfigLocalService getExamConfigLocalService() {
        return examConfigLocalService;
    }

    /**
     * Sets the exam config local service.
     *
     * @param examConfigLocalService the exam config local service
     */
    public void setExamConfigLocalService(
        ExamConfigLocalService examConfigLocalService) {
        this.examConfigLocalService = examConfigLocalService;
    }

    /**
     * Returns the exam config persistence.
     *
     * @return the exam config persistence
     */
    public ExamConfigPersistence getExamConfigPersistence() {
        return examConfigPersistence;
    }

    /**
     * Sets the exam config persistence.
     *
     * @param examConfigPersistence the exam config persistence
     */
    public void setExamConfigPersistence(
        ExamConfigPersistence examConfigPersistence) {
        this.examConfigPersistence = examConfigPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        PersistedModelLocalServiceRegistryUtil.register("hu.advancedweb.model.ExamAnswer",
            examAnswerLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "hu.advancedweb.model.ExamAnswer");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    protected Class<?> getModelClass() {
        return ExamAnswer.class;
    }

    protected String getModelClassName() {
        return ExamAnswer.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = examAnswerPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
